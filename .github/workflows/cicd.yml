name: Postvue Web Server CI/CD

on:
  push:
    branches:
      - master # main 브랜치에 push 시 실행
      
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}        # Docker Hub 이미지 이름

    steps:
      # 1. Node.js 버전 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.15.1 # 로컬에서 사용하는 Node.js 버전
          
      # 2. GitHub Repository 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

       # 3. .env 파일을 생성하고 환경 변수 설정 (GitHub Secrets에서 가져오기)
      - name: Create .env file from secrets
        run: |
          echo "REACT_APP_KAKAO_CLIENT_ID=${{ secrets.REACT_APP_KAKAO_CLIENT_ID }}" >> .env.production
          echo "REACT_APP_SERVER_PATH=${{ secrets.REACT_APP_SERVER_PATH }}" >> .env.production
          echo "REACT_APP_SERVER_API_URL=${{ secrets.REACT_APP_SERVER_API_URL }}" >> .env.production
          echo "REACT_APP_KAKAO_SDK_KEY=${{ secrets.REACT_APP_KAKAO_SDK_KEY }}" >> .env.production
          echo "REACT_APP_KAUTH_URL=${{ secrets.REACT_APP_KAUTH_URL }}" >> .env.production
          echo "REACT_APP_NAVER_CLIENT_ID=${{ secrets.REACT_APP_NAVER_CLIENT_ID }}" >> .env.production

      - name: Install dependencies and build
        run: |
          npm install --force
          npm run build

      # 3. Docker 이미지 빌드
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_HUB_REPOSITORY:latest .
          docker push $DOCKER_HUB_REPOSITORY:latest
            
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    - name: Deploy to server
      env:
        REMOTE_HOST: ${{ secrets.SERVER_HOST }}
        REMOTE_USER: ${{ secrets.SERVER_REMOTE_USER }}
        REMOTE_PORT: ${{ secrets.SERVER_REMOTE_PORT }}
        REMOTE_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        SERVICE_DIR: ${{ secrets.SERVICE_DIR }}
      run: |
        echo "Password length: ${#REMOTE_PASSWORD}"
        echo "port length: ${#REMOTE_PORT}"
        echo "username length: ${#REMOTE_USER}"
        echo "REMOTE_HOST length: ${#REMOTE_HOST}"
        sshpass -p "$REMOTE_PASSWORD" ssh -o StrictHostKeyChecking=no -p ${REMOTE_PORT} "${REMOTE_USER}@${REMOTE_HOST}" << EOF
          echo "$REMOTE_PASSWORD" | sudo -S -s
          sudo -s
          cd ${SERVICE_DIR}
          echo "Logging into Docker Hub..."
          echo "${DOCKER_HUB_ACCESS_TOKEN}" | docker login --username "${DOCKER_HUB_USERNAME}" --password-stdin
          echo "${REMOTE_PASSWORD}" | sudo -S docker-compose down --volumes --remove-orphans
          echo "${REMOTE_PASSWORD}" | sudo -S docker compose pull
          echo "${REMOTE_PASSWORD}" | sudo -S docker-compose up -d
        EOF
