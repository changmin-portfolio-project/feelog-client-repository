import { ReactComponent as LocationSmallIcon } from 'assets/images/icon/svg/LocationSmallIcon.svg';
import LongPressToResizeButton from 'components/common/buttton/LongPressToResizeButton';
import PostSettingButton from 'components/common/buttton/PostSettingButton';
import PostImagePreviewElement from 'components/common/posts/element/PostImagePreviewElement';
import PostVideoPreviewElement from 'components/common/posts/element/PostVideoPreviewElement';
import SystemSnsPostState from 'components/common/state/SystemSnsPostState';
import ScrapViewPopup from 'components/popups/profilescrap/ScrapViewPopup';
import { PROFILE_POST_LIST_PATH } from 'const/PathConst';
import { POST_IMAGE_TYPE, POST_VIDEO_TYPE } from 'const/PostContentTypeConst';
import {
  MEDIA_MOBILE_MAX_WIDTH,
  MEDIA_MOBILE_MAX_WIDTH_NUM,
} from 'const/SystemAttrConst';
import { isValidString } from 'global/util/ValidUtil';
import React, { useEffect, useRef, useState } from 'react';
import { generatePath, useNavigate } from 'react-router-dom';
import { useRecoilState } from 'recoil';
import {
  isPostDetailInfoPopupAtom,
  postDetailInfoPopupAtom,
  PostRspDefaultValue,
} from 'states/PostAtom';
import { isActiveScrapViewPopupByMasonryAtom } from 'states/ProfileAtom';
import { systemPostRspHashMapAtom } from 'states/SystemConfigAtom';
import styled from 'styled-components';
import { MasonryPostRsp, PostRsp } from '../../global/interface/post';
import { getHiddenPostIdList } from '../../global/util/HiddenPostIdListUtil';

interface SnsPostMasonryLayoutProps {
  snsPostList: PostRsp[];
  isActiveNavToPost?: boolean;
  actionFuncByRef?: (value: HTMLImageElement | HTMLVideoElement) => void;
  longPressToResizeNum?: number;
  SnsPostMasonryLayoutStyle?: React.CSSProperties;
  isAutoPlay?: boolean;
}

const SnsPostMasonryLayout: React.FC<SnsPostMasonryLayoutProps> = ({
  snsPostList,
  isActiveNavToPost = true,
  actionFuncByRef,
  longPressToResizeNum,
  SnsPostMasonryLayoutStyle,
  isAutoPlay = true,
}) => {
  const navigate = useNavigate();

  const [selectPostRsp, setSelectPostRsp] =
    useState<PostRsp>(PostRspDefaultValue);

  const [systemPostHashMap, setSystemPostHashMap] = useRecoilState(
    systemPostRspHashMapAtom,
  );

  const [postDetailInfo, setPostDetailInfo] = useRecoilState(
    postDetailInfoPopupAtom,
  );
  const [isPostDetailInfoPopup, setIsPostDetailInfoPopup] = useRecoilState(
    isPostDetailInfoPopupAtom,
  );

  const mansoryContentClass = 'masnory-content';
  const containerRef = useRef<HTMLDivElement>(null);

  const [hiddenPostIdList, setHiddenPostIdList] = useState<string[]>(
    getHiddenPostIdList(),
  );

  const [isActiveScrapViewPopupByMasonry, setIsActiveScrapViewPopupByMasonry] =
    useRecoilState(isActiveScrapViewPopupByMasonryAtom);

  const masonryLayout = () => {
    if (!containerRef.current) return;

    const masonryContainerStyle = getComputedStyle(containerRef.current);

    const autoRows = parseInt(
      masonryContainerStyle.getPropertyValue('grid-auto-rows'),
    );

    containerRef.current
      .querySelectorAll<HTMLDivElement>('.masonry-item')
      .forEach((elt) => {
        const pseudoImg = elt.querySelector<HTMLDivElement>(
          `.${mansoryContentClass}`,
        );

        if (pseudoImg) {
          elt.style.gridRowEnd = `span ${Math.ceil(
            pseudoImg.scrollHeight / autoRows + VerticalMarginGap / autoRows,
          )}`;
        }
      });
  };

  useEffect(() => {
    masonryLayout();
    window.addEventListener('resize', masonryLayout);
    const tempSystemPostHashMap = new Map(systemPostHashMap);
    snsPostList.forEach((post) => {
      const postRsp = tempSystemPostHashMap.get(post.postId);
      if (!postRsp) {
        tempSystemPostHashMap.set(post.postId, post);
      }
    });
    setSystemPostHashMap(tempSystemPostHashMap);

    return () => {
      window.removeEventListener('resize', masonryLayout);
    };
  }, []);

  const [errorPostIds, setErrorPostIds] = useState<Set<string>>(new Set());

  const handleImageError = (postId: string) => {
    setErrorPostIds((prev) => new Set(prev).add(postId));
  };

  const handleVideoError = (postId: string) => {
    setErrorPostIds((prev) => new Set(prev).add(postId));
  };

  const [activeVideoId, setActiveVideoId] = useState<string | null>(null);

  const handleVideoPlay = (postId: string) => {
    // 비디오가 화면에 보이면 해당 비디오만 재생하고, 다른 비디오는 멈춤
    setActiveVideoId(postId);
  };

  const handleVideoPause = (postId: string) => {
    // 비디오가 화면에서 벗어나면 재생 중지
    if (activeVideoId === postId) {
      setActiveVideoId(null);
    }
  };

  return (
    <>
      <MasonryContainer ref={containerRef} style={SnsPostMasonryLayoutStyle}>
        {snsPostList.map((v, index) => {
          const postContent = v.postContents[0];

          const masonryPostRsp: MasonryPostRsp = {
            postId: v.postId,
            userId: v.userId,
            postContent: postContent.content,
            postContentType: postContent.postContentType,
            username: v.username,
            location: v.location,
            previewImg: postContent.previewImg,
            isUploaded: postContent.isUploaded,
            videoDuration: postContent.videoDuration,
          };

          if (errorPostIds.has(v.postId)) return null;
          return (
            <MasonryItem
              className={
                masonryPostRsp.postContentType === POST_VIDEO_TYPE
                  ? 'masonry-video-item'
                  : 'masonry-item'
              }
              key={index}
              style={
                masonryPostRsp.postContentType === POST_VIDEO_TYPE
                  ? {
                      gridRowEnd: 'span 40',
                    }
                  : {}
              }
            >
              {!hiddenPostIdList.includes(v.postId) && (
                <PostWrap className={mansoryContentClass}>
                  <LongPressToResizeButton
                    resize={longPressToResizeNum || 0.98}
                    LongPressToResizeButtonContainerStyle={
                      masonryPostRsp.postContentType === POST_VIDEO_TYPE
                        ? {
                            height: '100%',
                          }
                        : {}
                    }
                  >
                    <PostImgAddressWrap
                      $hasAddress={isValidString(v.location.address)}
                      onClick={() => {
                        if (!isActiveNavToPost) return;

                        // navigate(`/${v.username}/${v.postId}`);
                        //@REFER: 일단 url로 이동하는 걸로
                        if (window.innerWidth > MEDIA_MOBILE_MAX_WIDTH_NUM) {
                          // 데스크탑 크기
                          // url로 이동

                          navigate(
                            generatePath(PROFILE_POST_LIST_PATH, {
                              user_id: v.username,
                              post_id: v.postId,
                            }),
                            {
                              state: { isDetailPopup: true },
                            },
                          );
                        } else {
                          // 모바일 크기
                          // url만 바뀌도록 변경
                          // window.history.pushState(
                          //   null,
                          //   '',
                          //   `/${v.username}/${v.postId}`,
                          // );
                          setIsPostDetailInfoPopup(true);
                          setPostDetailInfo({
                            postId: v.postId,
                            userId: v.username,
                          });
                        }
                      }}
                    >
                      {masonryPostRsp.postContentType === POST_IMAGE_TYPE && (
                        <PostImagePreviewElement
                          imageSrc={masonryPostRsp.postContent}
                          onLoad={masonryLayout}
                          actionFuncByRef={actionFuncByRef}
                          PostImageStyle={{
                            borderRadius: `${ContentBorderRadius}px`,
                          }}
                          onError={() => handleImageError(v.postId)}
                        />
                      )}
                      {masonryPostRsp.postContentType === POST_VIDEO_TYPE && (
                        <PostVideoPreviewElement
                          postId={masonryPostRsp.postId}
                          activeVideoId={activeVideoId}
                          onPlay={() => handleVideoPlay(masonryPostRsp.postId)}
                          onPause={() =>
                            handleVideoPause(masonryPostRsp.postId)
                          }
                          autoPlayMode={isAutoPlay}
                          videoSrc={masonryPostRsp.postContent}
                          videoDuration={masonryPostRsp.videoDuration}
                          posterImg={masonryPostRsp.previewImg}
                          onLoadedData={masonryLayout}
                          actionFuncByRef={actionFuncByRef}
                          PostVideoStyle={{
                            borderRadius: `${ContentBorderRadius}px`,
                            backgroundColor: 'black',
                          }}
                          isVisibilityDetection={true}
                          onError={() => {
                            handleVideoError(v.postId);
                            setActiveVideoId(null);
                          }}
                        />
                      )}

                      {v.location.address && (
                        <PostAddressWrap>
                          <PostAddressSubWrap>
                            <LocationSmallIconWrap>
                              <LocationSmallIcon />
                            </LocationSmallIconWrap>
                            <PostAddress>{v.location.address}</PostAddress>
                          </PostAddressSubWrap>
                        </PostAddressWrap>
                      )}
                    </PostImgAddressWrap>
                  </LongPressToResizeButton>
                  <PostSettingButton
                    masonryPostRsp={masonryPostRsp}
                    setSelectPostRsp={setSelectPostRsp}
                    snsPostRsp={v}
                  />
                </PostWrap>
              )}
            </MasonryItem>
          );
        })}
      </MasonryContainer>

      {isValidString(selectPostRsp.postId) &&
        isValidString(selectPostRsp.postContents[0].content) &&
        isValidString(selectPostRsp.postContents[0].content) && (
          <ScrapViewPopup
            postId={selectPostRsp.postId}
            postContentUrl={selectPostRsp.postContents[0].content}
            postContentType={selectPostRsp.postContents[0].postContentType}
            snsPost={selectPostRsp}
            setSnsPost={setSelectPostRsp}
            isActiveScrapViewPopup={isActiveScrapViewPopupByMasonry}
            setIsActiveScrapViewPopup={setIsActiveScrapViewPopupByMasonry}
          />
        )}
      <SystemSnsPostState postRsp={selectPostRsp} />
    </>
  );
};

const ContentBorderRadius = 22;

const VerticalMarginGap = 5;
const MasonryContainer = styled.div`
  --gap: 10px;

  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(168px, 1fr));
  column-gap: var(--gap);
  grid-auto-rows: 10px;

  // height: 90vh;
  padding: 0 6px;
`;

const MasonryItem = styled.div`
  margin-bottom: ${VerticalMarginGap}px;
`;

const PostWrap = styled.div`
  height: 100%;
  display: flex;
  flex-flow: column;
`;

const PostImgAddressWrap = styled.div<{ $hasAddress: boolean }>`
  position: relative;
  cursor: pointer;
  height: 100%;

  ${(props) =>
    props.$hasAddress &&
    `&::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 30%; /* 그라데이션 높이 조절 */
    background: linear-gradient(to top, rgba(0, 0, 0, 0.4), transparent);
    border-radius: 0 0 ${ContentBorderRadius}px ${ContentBorderRadius}px;
  }`}
`;

const PostAddressWrap = styled.div`
  position: absolute;
  bottom: 0px;
  width: 100%;
  z-index: 10;
`;

const PostAddressSubWrap = styled.div`
  display: flex;
  gap: 2px;
  padding: 0 0 9px 8px;
`;

const PostAddress = styled.div`
  font: ${({ theme }) => theme.fontSizes.BoxText};

  @media (min-width: ${MEDIA_MOBILE_MAX_WIDTH}) {
    font: ${({ theme }) => theme.fontSizes.Body3};
  }
  color: ${({ theme }) => theme.mainColor.White};

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const LocationSmallIconWrap = styled.div`
  display: flex;
  margin: auto 0px;
`;

export default SnsPostMasonryLayout;
